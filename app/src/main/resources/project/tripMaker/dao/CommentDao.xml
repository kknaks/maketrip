<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.tripMaker.dao.CommentDao">
    <!-- ResultMap for Board -->
    <resultMap id="CommentMap" type="project.tripMaker.vo.Comment">
        <id property="commentNo" column="comment_no"/>
        <result property="boardNo" column="board_no"/>
        <result property="userNo" column="user_no" javaType="java.lang.Long"/>
        <result property="commentContent" column="comment_content"/>
        <result property="commentCreatedDate" column="comment_created_date"/>
        <result property="commentLike" column="comment_like_count"/>
        <result property="boardtypeNo" column="boardtype_no"/>
        <result property="boardTitle" column="board_title"/>

        <association property="writer" javaType="project.tripMaker.vo.User">
            <id property="userNo" column="user_no" javaType="java.lang.Long"/>
            <result property="userNickname" column="user_nickname"/>
            <result property="userPhoto" column="user_photo"/>
        </association>
    </resultMap>

    <select id="list" resultMap="CommentMap" parameterType="int">

        SELECT
        c.comment_no,
        c.board_no,
        c.user_no,
        c.comment_content,
        c.comment_created_date,
        u.user_no AS user_no,
        u.user_nickname,
        u.user_photo
        FROM
        comment c
        JOIN
        user u ON c.user_no = u.user_no
        WHERE
        c.board_no = #{boardNo}
        ORDER BY
        c.comment_no ASC
    </select>

    <insert id="insert" parameterType="comment"
            useGeneratedKeys="true" keyColumn="comment_no" keyProperty="commentNo">
        insert into comment(
        board_no,
        user_no,
        comment_content,
        comment_created_date)
        values (
        #{boardNo},
        #{userNo},
        #{commentContent},
        now())
    </insert>

    <select id="findBy" resultMap="CommentMap" parameterType="int">
        SELECT
        comment_no,
        board_no,
        user_no,
        comment_content,
        comment_created_date
        FROM
        comment
        WHERE
        comment_no=#{commentNo}
        ORDER BY
        comment_no ASC
    </select>

    <delete id="delete" parameterType="int">
        delete from comment
        where comment_no=#{commentNo}
    </delete>

    <update id="update" parameterType="comment">
        update
        comment
        set
        comment_content=#{commentContent}
        where
        comment_no=#{commentNo}
    </update>

    <select id="countByBoardNo" resultType="int">
        SELECT COUNT(*) FROM comment WHERE board_no = #{boardNo}
    </select>





    <select id="listByPage" resultMap="CommentMap" parameterType="int">
        SELECT
        c.comment_no,
        c.board_no,
        c.user_no,
        c.comment_content,
        c.comment_created_date,
        u.user_no AS user_no,
        u.user_nickname,
        u.user_photo
        FROM
        comment c
        JOIN
        user u ON c.user_no = u.user_no
        WHERE
        c.board_no = #{boardNo}
        ORDER BY
        c.comment_no ASC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="getCommentLikeCount" resultType="int" parameterType="int">
        SELECT COALESCE(comment_like_count, 0)
        FROM commentlike_count_view
        WHERE comment_no = #{commentNo}
    </select>

    <!-- 사용자가 해당 게시글에 좋아요를 눌렀는지 확인 -->
    <select id="isCommentLiked" parameterType="map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM commentlike
        WHERE comment_no = #{commentNo} AND user_no = #{userNo}
    </select>

    <!-- 좋아요 추가 -->
    <insert id="addCommentLike" parameterType="map">
        INSERT INTO commentlike (comment_no, user_no) VALUES (#{commentNo}, #{userNo})
    </insert>

    <!-- 좋아요 삭제 -->
    <delete id="removeCommentLike" parameterType="map">
        DELETE FROM commentlike WHERE comment_no = #{commentNo} AND user_no = #{userNo}
    </delete>

    <!-- 좋아요 순으로 댓글 조회 -->
    <select id="findCommentsByLikes" resultMap="CommentMap">
        SELECT
        c.comment_no,
        c.board_no,
        c.user_no,
        c.comment_content,
        c.comment_created_date,
        u.user_no AS user_no,
        u.user_nickname,
        u.user_photo,
        COALESCE(cl.like_count, 0) AS comment_like_count
        FROM
        comment c
        JOIN
        user u ON c.user_no = u.user_no
        LEFT JOIN
        (SELECT comment_no, COUNT(*) AS like_count FROM commentlike GROUP BY comment_no) cl
        ON
        c.comment_no = cl.comment_no
        WHERE
        c.board_no = #{boardNo}
        ORDER BY
        cl.like_count DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="listUser" resultMap="CommentMap" parameterType="Map">
        SELECT
            c.comment_no,
            b.board_no,
            b.boardtype_no,
            b.board_title,
            c.comment_content,
            c.comment_created_date,
            u.user_nickname,
            COALESCE(cl.comment_like_count, 0) AS comment_like_count
        FROM
            comment c
        JOIN
            user u ON c.user_no = u.user_no
        JOIN
            board b ON c.board_no = b.board_no
        LEFT JOIN
            commentlike_count_view cl ON c.comment_no = cl.comment_no
        WHERE
            u.user_no = #{userNo}
            <if test="searchType != null and searchText != null">
                <choose>
                    <when test="searchType == 'commentContent'">
                        AND c.comment_content LIKE CONCAT('%', #{searchText}, '%')
                    </when>
                </choose>
            </if>
        ORDER BY
            c.comment_no DESC
        LIMIT #{rowNo}, #{length}
    </select>

    <select id="countAllUserComment" parameterType="Map" resultType="int">
        SELECT count(*)
        FROM
        comment c
        JOIN
        user u ON c.user_no = u.user_no
        JOIN
        board b ON c.board_no = b.board_no
        WHERE u.user_no = #{userNo}
        <if test="searchType != null and searchText != null">
            <choose>
                <when test="searchType == 'commentContent'">
                    AND c.comment_content LIKE CONCAT('%', #{searchText}, '%')
                </when>
            </choose>
        </if>
    </select>
</mapper>